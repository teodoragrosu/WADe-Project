# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Articles(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, _date: date=None, title: str=None, astract: str=None, authors: str=None, categories: str=None, url: str=None, type: str=None):  # noqa: E501
        """Articles - a model defined in Swagger

        :param id: The id of this Articles.  # noqa: E501
        :type id: int
        :param _date: The _date of this Articles.  # noqa: E501
        :type _date: date
        :param title: The title of this Articles.  # noqa: E501
        :type title: str
        :param astract: The astract of this Articles.  # noqa: E501
        :type astract: str
        :param authors: The authors of this Articles.  # noqa: E501
        :type authors: str
        :param categories: The categories of this Articles.  # noqa: E501
        :type categories: str
        :param url: The url of this Articles.  # noqa: E501
        :type url: str
        :param type: The type of this Articles.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'id': int,
            '_date': date,
            'title': str,
            'astract': str,
            'authors': str,
            'categories': str,
            'url': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            '_date': 'date',
            'title': 'title',
            'astract': 'astract',
            'authors': 'authors',
            'categories': 'categories',
            'url': 'url',
            'type': 'type'
        }
        self._id = id
        self.__date = _date
        self._title = title
        self._astract = astract
        self._authors = authors
        self._categories = categories
        self._url = url
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Articles':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Articles of this Articles.  # noqa: E501
        :rtype: Articles
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Articles.


        :return: The id of this Articles.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Articles.


        :param id: The id of this Articles.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def _date(self) -> date:
        """Gets the _date of this Articles.


        :return: The _date of this Articles.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date: date):
        """Sets the _date of this Articles.


        :param _date: The _date of this Articles.
        :type _date: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def title(self) -> str:
        """Gets the title of this Articles.


        :return: The title of this Articles.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Articles.


        :param title: The title of this Articles.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def astract(self) -> str:
        """Gets the astract of this Articles.


        :return: The astract of this Articles.
        :rtype: str
        """
        return self._astract

    @astract.setter
    def astract(self, astract: str):
        """Sets the astract of this Articles.


        :param astract: The astract of this Articles.
        :type astract: str
        """

        self._astract = astract

    @property
    def authors(self) -> str:
        """Gets the authors of this Articles.


        :return: The authors of this Articles.
        :rtype: str
        """
        return self._authors

    @authors.setter
    def authors(self, authors: str):
        """Sets the authors of this Articles.


        :param authors: The authors of this Articles.
        :type authors: str
        """
        if authors is None:
            raise ValueError("Invalid value for `authors`, must not be `None`")  # noqa: E501

        self._authors = authors

    @property
    def categories(self) -> str:
        """Gets the categories of this Articles.


        :return: The categories of this Articles.
        :rtype: str
        """
        return self._categories

    @categories.setter
    def categories(self, categories: str):
        """Sets the categories of this Articles.


        :param categories: The categories of this Articles.
        :type categories: str
        """

        self._categories = categories

    @property
    def url(self) -> str:
        """Gets the url of this Articles.


        :return: The url of this Articles.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Articles.


        :param url: The url of this Articles.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def type(self) -> str:
        """Gets the type of this Articles.


        :return: The type of this Articles.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Articles.


        :param type: The type of this Articles.
        :type type: str
        """

        self._type = type