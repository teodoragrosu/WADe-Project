# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.country import Country  # noqa: F401,E501
from swagger_server import util


class News(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, _date: date=None, title: str=None, source: str=None, publication: str=None, keywords: str=None, img_url: str=None):  # noqa: E501
        """News - a model defined in Swagger

        :param id: The id of this News.  # noqa: E501
        :type id: int
        :param _date: The _date of this News.  # noqa: E501
        :type _date: date
        :param title: The title of this News.  # noqa: E501
        :type title: str
        :param source: The source of this News.  # noqa: E501
        :type source: str
        :param publication: The publication of this News.  # noqa: E501
        :type publication: str
        :param keywords: The keywords of this News.  # noqa: E501
        :type keywords: str
        :param img_url: The img_url of this News.  # noqa: E501
        :type img_url: str
        """
        self.swagger_types = {
            'id': int,
            '_date': date,
            'title': str,
            'source': str,
            'publication': str,
            'keywords': str,
            'img_url': str
        }

        self.attribute_map = {
            'id': 'id',
            '_date': 'date',
            'title': 'title',
            'source': 'source',
            'publication': 'publication',
            'keywords': 'keywords',
            'img_url': 'img_url'
        }
        self._id = id
        self.__date = _date
        self._title = title
        self._source = source
        self._publication = publication
        self._keywords = keywords
        self._img_url = img_url

    @classmethod
    def from_dict(cls, dikt) -> 'News':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The News of this News.  # noqa: E501
        :rtype: News
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this News.


        :return: The id of this News.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this News.


        :param id: The id of this News.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def _date(self) -> date:
        """Gets the _date of this News.


        :return: The _date of this News.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date: date):
        """Sets the _date of this News.


        :param _date: The _date of this News.
        :type _date: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def title(self) -> str:
        """Gets the title of this News.


        :return: The title of this News.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this News.


        :param title: The title of this News.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def source(self) -> str:
        """Gets the source of this News.


        :return: The source of this News.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: str):
        """Sets the source of this News.


        :param source: The source of this News.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def publication(self) -> str:
        """Gets the publication of this News.


        :return: The publication of this News.
        :rtype: str
        """
        return self._publication

    @publication.setter
    def publication(self, publication: str):
        """Sets the publication of this News.


        :param publication: The publication of this News.
        :type publication: str
        """

        self._publication = publication

    @property
    def keywords(self) -> str:
        """Gets the keywords of this News.


        :return: The keywords of this News.
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords: str):
        """Sets the keywords of this News.


        :param keywords: The keywords of this News.
        :type keywords: str
        """

        self._keywords = keywords

    @property
    def img_url(self) -> str:
        """Gets the img_url of this News.


        :return: The img_url of this News.
        :rtype: str
        """
        return self._img_url

    @img_url.setter
    def img_url(self, img_url: str):
        """Sets the img_url of this News.


        :param img_url: The img_url of this News.
        :type img_url: str
        """

        self._img_url = img_url
