# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.country import Country  # noqa: F401,E501
from swagger_server import util


class Cases(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, _date: date=None, active: int=None, confirmed: int=None, deceased: int=None, recovered: int=None, total_confirmed: int=None, total_deceased: int=None, total_recovered: int=None, country: Country=None):  # noqa: E501
        """Cases - a model defined in Swagger

        :param _date: The _date of this Cases.  # noqa: E501
        :type _date: date
        :param active: The active of this Cases.  # noqa: E501
        :type active: int
        :param confirmed: The confirmed of this Cases.  # noqa: E501
        :type confirmed: int
        :param deceased: The deceased of this Cases.  # noqa: E501
        :type deceased: int
        :param recovered: The recovered of this Cases.  # noqa: E501
        :type recovered: int
        :param total_confirmed: The total_confirmed of this Cases.  # noqa: E501
        :type total_confirmed: int
        :param total_deceased: The total_deceased of this Cases.  # noqa: E501
        :type total_deceased: int
        :param total_recovered: The total_recovered of this Cases.  # noqa: E501
        :type total_recovered: int
        :param country: The country of this Cases.  # noqa: E501
        :type country: Country
        """
        self.swagger_types = {
            '_date': date,
            'active': int,
            'confirmed': int,
            'deceased': int,
            'recovered': int,
            'total_confirmed': int,
            'total_deceased': int,
            'total_recovered': int,
            'country': Country
        }

        self.attribute_map = {
            '_date': 'date',
            'active': 'active',
            'confirmed': 'confirmed',
            'deceased': 'deceased',
            'recovered': 'recovered',
            'total_confirmed': 'total_confirmed',
            'total_deceased': 'total_deceased',
            'total_recovered': 'total_recovered',
            'country': 'country'
        }
        self.__date = _date
        self._active = active
        self._confirmed = confirmed
        self._deceased = deceased
        self._recovered = recovered
        self._total_confirmed = total_confirmed
        self._total_deceased = total_deceased
        self._total_recovered = total_recovered
        self._country = country

    @classmethod
    def from_dict(cls, dikt) -> 'Cases':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Cases of this Cases.  # noqa: E501
        :rtype: Cases
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self) -> date:
        """Gets the _date of this Cases.


        :return: The _date of this Cases.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date: date):
        """Sets the _date of this Cases.


        :param _date: The _date of this Cases.
        :type _date: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def active(self) -> int:
        """Gets the active of this Cases.


        :return: The active of this Cases.
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active: int):
        """Sets the active of this Cases.


        :param active: The active of this Cases.
        :type active: int
        """

        self._active = active

    @property
    def confirmed(self) -> int:
        """Gets the confirmed of this Cases.


        :return: The confirmed of this Cases.
        :rtype: int
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed: int):
        """Sets the confirmed of this Cases.


        :param confirmed: The confirmed of this Cases.
        :type confirmed: int
        """

        self._confirmed = confirmed

    @property
    def deceased(self) -> int:
        """Gets the deceased of this Cases.


        :return: The deceased of this Cases.
        :rtype: int
        """
        return self._deceased

    @deceased.setter
    def deceased(self, deceased: int):
        """Sets the deceased of this Cases.


        :param deceased: The deceased of this Cases.
        :type deceased: int
        """

        self._deceased = deceased

    @property
    def recovered(self) -> int:
        """Gets the recovered of this Cases.


        :return: The recovered of this Cases.
        :rtype: int
        """
        return self._recovered

    @recovered.setter
    def recovered(self, recovered: int):
        """Sets the recovered of this Cases.


        :param recovered: The recovered of this Cases.
        :type recovered: int
        """

        self._recovered = recovered

    @property
    def total_confirmed(self) -> int:
        """Gets the total_confirmed of this Cases.


        :return: The total_confirmed of this Cases.
        :rtype: int
        """
        return self._total_confirmed

    @total_confirmed.setter
    def total_confirmed(self, total_confirmed: int):
        """Sets the total_confirmed of this Cases.


        :param total_confirmed: The total_confirmed of this Cases.
        :type total_confirmed: int
        """

        self._total_confirmed = total_confirmed

    @property
    def total_deceased(self) -> int:
        """Gets the total_deceased of this Cases.


        :return: The total_deceased of this Cases.
        :rtype: int
        """
        return self._total_deceased

    @total_deceased.setter
    def total_deceased(self, total_deceased: int):
        """Sets the total_deceased of this Cases.


        :param total_deceased: The total_deceased of this Cases.
        :type total_deceased: int
        """

        self._total_deceased = total_deceased

    @property
    def total_recovered(self) -> int:
        """Gets the total_recovered of this Cases.


        :return: The total_recovered of this Cases.
        :rtype: int
        """
        return self._total_recovered

    @total_recovered.setter
    def total_recovered(self, total_recovered: int):
        """Sets the total_recovered of this Cases.


        :param total_recovered: The total_recovered of this Cases.
        :type total_recovered: int
        """

        self._total_recovered = total_recovered

    @property
    def country(self) -> Country:
        """Gets the country of this Cases.


        :return: The country of this Cases.
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country: Country):
        """Sets the country of this Cases.


        :param country: The country of this Cases.
        :type country: Country
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country